#include <SPI.h>
#include <LiquidCrystal.h> //lcd 쓰는 라이브러리
const int  cs=15; //chip select 

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);           //lcd 패널에 사용되는 핀을 선택

int lcd_key     = 0;
int adc_key_in  = 0;
int lcd_count   = 0;
bool btn = true;

#define btnRIGHT  0      //오른쪽  0~5까지의 버튼 정의
#define btnUP     1      //위        
#define btnDOWN   2      //아래
#define btnLEFT   3      //왼
#define btnSELECT 4      //선택
#define btnNONE   5      //None 버튼 

//=====================================
int RTC_init(){ 
	  pinMode(cs,OUTPUT); // chip select
	  // start the SPI library:
	  SPI.begin();
	  SPI.setBitOrder(MSBFIRST); 
	  SPI.setDataMode(SPI_MODE1); // both mode 1 & 3 should work 
	  //set control register 
	  digitalWrite(cs, LOW);  
	  SPI.transfer(0x8E);
	  SPI.transfer(0x60); //60= disable Osciallator and Battery SQ wave @1hz, temp compensation, Alarms disabled
	  digitalWrite(cs, HIGH);
	  delay(10);
}
//=====================================
void SetTimeDate(int d, int mo, int y, int h, int mi, int s){ 
	int TimeDate [7]={s,mi,h,0,d,mo,y};
	for(int i=0; i<=6;i++){
		if(i==3)
			i++;
		int b= TimeDate[i]/10;
		int a= TimeDate[i]-b*10;
		if(i==2){
			if (b==2)
				b=B00000010;
			else if (b==1)
				b=B00000001;
		}	
		TimeDate[i]= a+(b<<4);
		  
		digitalWrite(cs, LOW);
		SPI.transfer(i+0x80); 
		SPI.transfer(TimeDate[i]);        
		digitalWrite(cs, HIGH);
  }
}
//=====================================
String ReadTimeDate(){
	String temp;
	int TimeDate [7]; //second,minute,hour,null,day,month,year		
	for(int i=0; i<=6;i++){
		if(i==3)
			i++;
		digitalWrite(cs, LOW);
		SPI.transfer(i+0x00); 
		unsigned int n = SPI.transfer(0x00);        
		digitalWrite(cs, HIGH);
		int a=n & B00001111;    
		if(i==2){	
			int b=(n & B00110000)>>4; //24 hour mode
			if(b==B00000010)
				b=20;        
			else if(b==B00000001)
				b=10;
			TimeDate[i]=a+b;
		}
		else if(i==4){
			int b=(n & B00110000)>>4;
			TimeDate[i]=a+b*10;
		}
		else if(i==5){
			int b=(n & B00010000)>>4;
			TimeDate[i]=a+b*10;
		}
		else if(i==6){
			int b=(n & B11110000)>>4;
			TimeDate[i]=a+b*10;
		}
		else{	
			int b=(n & B01110000)>>4;
			TimeDate[i]=a+b*10;	
			}
	}
	temp.concat(TimeDate[4]);
	temp.concat("/") ;
	temp.concat(TimeDate[5]);
	temp.concat("/") ;
	temp.concat(TimeDate[6]);
	temp.concat(" ") ;
	temp.concat(TimeDate[2]);
	temp.concat(":") ;
	temp.concat(TimeDate[1]);
	temp.concat(":") ;
	temp.concat(TimeDate[0]);
  return(temp);
}

int read_LCD_buttons() {              // 버튼 읽는 함수 0~5까지의 값을 반환
  adc_key_in = analogRead(0);       // 전압값을 아날로그값으로 바꿔 읽은 아날로그(0) 핀 센서의 값을 읽는다 , 아마 하드웨어적으로 쉴드에 키를 누르면 전압값이 바뀌게 설정 되었을 것이다.

  // my buttons when read are centered at these valies: 0, 144, 329, 504, 741

  if (adc_key_in > 1000) return btnNONE; //1000보다 클때 NONE 반환 (버튼이 안눌린 경우) 전압 high 상태?

  // For V1.1 us this threshold           //전압값이
  if (adc_key_in < 50)   return btnRIGHT; //50 이하일 때 RIGHT
  if (adc_key_in < 250)  return btnUP;    //250 이하일 때 UP
  if (adc_key_in < 450)  return btnDOWN;  //450 이하일 때 DOWN
  if (adc_key_in < 650)  return btnLEFT;  //650 이하일 때 LEFT
  if (adc_key_in < 850)  return btnSELECT;  //850 이하일 때 SELECT
  /*
    if (adc_key_in < 50)   return btnRIGHT;
    if (adc_key_in < 195)  return btnUP;
    if (adc_key_in < 380)  return btnDOWN;
    if (adc_key_in < 555)  return btnLEFT;
    if (adc_key_in < 790)  return btnSELECT;
  */

  return btnNONE;                // 버튼을 읽지 못했을때 이것을 반환
}

void Lcd_switch(int key) {
  if (lcd_count < 0) lcd_count = 0;
  if (lcd_count > 7) lcd_count = 7;
  switch (key) {              // 0~ 5사이의 값

    case btnRIGHT: {            // 0 일때
        //lcd.print("RIGHT ");
        break;
      }
    case btnLEFT: {
        //lcd.print("LEFT   "); //  3 일때
        break;
      }
    case btnUP: {
        //lcd.print("UP    ");  //  1 일때
        if (btn == true) {
          lcd_count--;
          btn = false;
        }
        break;
      }
    case btnDOWN: {
        //lcd.print("DOWN  ");  //  2 일때
        if (btn == true) {
          lcd_count++;
          btn = false;
        }
        break;
      }
    case btnSELECT: {
        //lcd.print("SELECT");  //  4 일때
        break;
      }
    case btnNONE: {
        //lcd.print("NONE  ");  // 안눌렸을 때
        btn = true;
        break;
      }
  }
}
void Read_switch(int count) {
  if (count < 0) count = 0;
  if (count > 7) count = 7;
  switch (count) {
    case 1: {
        lcd.setCursor(0, 0);
        lcd.print("1  Mene <-");
        lcd.setCursor(0, 1);
        lcd.print("2  Mene   ");
        break;
      }
    case 2: {
        lcd.setCursor(0, 0);
        lcd.print("1  Mene   ");
        lcd.setCursor(0, 1);
        lcd.print("2  Mene <-");
        break;

      }
    case 3: {
        lcd.setCursor(0, 0);
        lcd.print("2  Mene   ");
        lcd.setCursor(0, 1);
        lcd.print("3  Mene <-");
        break;

      }
    case 4: {
        lcd.setCursor(0, 0);
        lcd.print("3  Mene   ");
        lcd.setCursor(0, 1);
        lcd.print("4  Mene <-");
        break;

      }
    case 5: {
        lcd.setCursor(0, 0);
        lcd.print("4  Mene   ");
        lcd.setCursor(0, 1);
        lcd.print("5  Mene <-");
        break;
      }
    case 6: {
        lcd.setCursor(0, 0);
        lcd.print("5  Mene   ");
        lcd.setCursor(0, 1);
        lcd.print("6  Mene <-");
        break;
      }
    case 7: {
        lcd.setCursor(0, 0);
        lcd.print("6  Mene   ");
        lcd.setCursor(0, 1);
        lcd.print("7  Mene <-");
        break;
      }
  }
}

void setup() {
  lcd.begin(16, 2);   // 2행 16열 lcd 시작
  Serial.begin(9600);
  RTC_init();
  SetTimeDate(11,12,13,14,15,16);
  lcd.setCursor(0,0);             // 커서 (0,0)
  lcd.print("Push the buttons");  // 프린트 "Push the buttons"
  lcd.setCursor(0,1);
  lcd.print(ReadTimeDate());   
}

void loop() {
  //lcd.setCursor(9,1);             // 커서 (9,1)에
  // lcd.print(millis()/1000);       // 초단위가 커서 9,1 에 출력된다

  lcd_key = read_LCD_buttons();   // 외부함수 read_LCD_buttons() 값을 Key에 복사한다. 0~5사이의 값
  Lcd_switch(lcd_key);
  Read_switch(lcd_count);
  Serial.println(lcd_count);
  Serial.println(ReadTimeDate());
 lcd.setCursor(0,1);
 lcd.print(ReadTimeDate());  
 delay(1000);
}