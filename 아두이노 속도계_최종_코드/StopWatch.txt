#include <LiquidCrystal.h>
#include <MsTimer2.h>

// Switch on LED on pin 13 each second
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);           //lcd 패널에 사용되는 핀을 선택

int lcd_key     = 0;
int adc_key_in  = 0;
int lcd_count   = 0;
int Stop_Select_count = 0;
int Stop_Right_count = 0;
int Stop_UpDown_count = 3;

bool btn = true;

double time = 0;
int minute[5] = {0, 0, 0, 0, 0};
int second = 0;
double a[5] = {0, 0, 0, 0, 0};
double c[5] = {0, 0, 0, 0, 0};
double micro_second[5] = {0 , 0 , 0 , 0 , 0};

#define btnRIGHT  0      //오른쪽  0~5까지의 버튼 정의
#define btnUP     1      //위        
#define btnDOWN   2      //아래
#define btnLEFT   3      //왼
#define btnSELECT 4      //선택
#define btnNONE   5      //None 버튼 

int read_LCD_buttons() {              // 버튼 읽는 함수 0~5까지의 값을 반환
  adc_key_in = analogRead(0);       // 전압값을 아날로그값으로 바꿔 읽은 아날로그(0) 핀 센서의 값을 읽는다 , 아마 하드웨어적으로 쉴드에 키를 누르면 전압값이 바뀌게 설정 되었을 것이다.

  // my buttons when read are centered at these valies: 0, 144, 329, 504, 741

  if (adc_key_in > 1000) {
    btn = true;
    return btnNONE; //1000보다 클때 NONE 반환 (버튼이 안눌린 경우) 전압 high 상태?
  }

  // For V1.1 us this threshold           //전압값이
  if (adc_key_in < 50)  {
    if (btn == true && Stop_Select_count == 1) {
      if (Stop_Right_count == 0) Stop_Right_count = 1;
      else if (Stop_Right_count == 1) Stop_Right_count = 2;
      else if (Stop_Right_count == 2) Stop_Right_count = 3;
      else if (Stop_Right_count == 3) Stop_Right_count = 4;
      else if (Stop_Right_count == 4) Stop_Right_count = 5;
      btn = false;
    }
    return btnRIGHT; //50 이하일 때 RIGHT
  }
  if (adc_key_in < 250) {
    if (Stop_Select_count == 1 && Stop_Right_count == 5 && btn == true) {
        if (Stop_UpDown_count > 0)
        Stop_UpDown_count--;
      btn = false;
    }
    return btnUP;    //250 이하일 때 UP
  }
  if (adc_key_in < 450) {
    if (Stop_Select_count == 1 && Stop_Right_count == 5 && btn == true) {
          if (Stop_UpDown_count < 3)
        Stop_UpDown_count++;
      btn = false;
    }
    return btnDOWN;  //450 이하일 때 DOWN
  }
  if (adc_key_in < 650)  return btnLEFT;  //650 이하일 때 LEFT
  if (adc_key_in < 850) {
    if (btn == true && Stop_Select_count == 0 ) {
      Stop_Select_count = 1;
      btn = false;
    }
    if (btn == true && Stop_Select_count == 1) {
      Stop_Select_count = 0;
      Stop_Right_count = 0;
      Stop_UpDown_count = 3;
      btn = false;
    }
    /*if (btn == true && Stop_Select_count == 2) {
      Stop_Select_count = 0;
      btn = false;
      } */
    return btnSELECT;  //850 이하일 때 SELECT
  }
  /*
    if (adc_key_in < 50)   return btnRIGHT;
    if (adc_key_in < 195)  return btnUP;
    if (adc_key_in < 380)  return btnDOWN;
    if (adc_key_in < 555)  return btnLEFT;
    if (adc_key_in < 790)  return btnSELECT;
  */

  return btnNONE; // 버튼을 읽지 못했을때 이것을 반환
}
void getTime(double t, int i) {
  minute[i] = time / 60;
  second = (int)t % 60;
  micro_second[i] = second + (t - int(t)) * 60 / 100;
}
void upPrint(int i) {
  while (Stop_Right_count == i && Stop_Select_count == 1) {
    //  Serial.print(Stop_Select_count);
    Serial.print(Stop_Right_count);
    // Serial.println(c);
    lcd.clear();
    c[i] = millis();
    time = (c[i] - a[i]) / 1000;
    getTime(time, i);
    lcd.setCursor(0, 0);
    lcd.print(minute[i]);
    lcd.print(".");
    lcd.print(micro_second[i]);
    lcd.setCursor(11, 0);
    lcd.print("Stop");
    read_LCD_buttons();
    delay(100);
  }
}
void upPrint2(int i) {
  while (Stop_Right_count == i && Stop_Select_count == 1) {
    //  Serial.print(Stop_Select_count);
    Serial.print(Stop_Right_count);
    // Serial.println(c);
    //lcd.clear();
    c[i] = millis();
    time = (c[i] - a[i]) / 1000;
    getTime(time, i);
    lcd.setCursor(0, 1);
    lcd.print(minute[i]);
    lcd.print(".");
    lcd.print(micro_second[i]);
    lcd.setCursor(11, 1);
    lcd.print("Stop");
    read_LCD_buttons();
    delay(100);
  }
}

void stopPrint(int i) {
  while (Stop_Right_count == i && Stop_Select_count == 1) {
    // Serial.print(Stop_Select_count);
    Serial.print(Stop_Right_count);
    lcd.setCursor(0, 0);
    lcd.print(minute[i - 1]);
    lcd.print(".");
    lcd.print(micro_second[i - 1]);
    lcd.setCursor(11, 0);
    lcd.print("Stop");
    upPrint2(i);
    read_LCD_buttons();
  }
}

void stopPrint2(int i) {
  while (Stop_Right_count == 5 && Stop_Select_count == 1) {
    lcd.setCursor(0, 0);
    lcd.print(minute[i]);
    lcd.print(".");
    lcd.print(micro_second[i]);
    lcd.setCursor(11, 0);
    lcd.print("Stop");
    lcd.setCursor(0, 1);
    lcd.print(minute[i+1]);
    lcd.print(".");
    lcd.print(micro_second[i+1]);
    lcd.setCursor(11, 1);
    lcd.print("Stop");
    read_LCD_buttons();
    if(Stop_UpDown_count != i) return;
  }
}
void setup()
{
  lcd.begin(16, 2);
  lcd.clear();

  Serial.begin(9600);
}

void loop()
{
  //Serial.print(Stop_Select_count);
  Serial.print(Stop_Right_count);
  // Serial.println(a);
  lcd.clear();
  lcd.print("Stopwatch!!");
  delay(100);
  lcd_key = read_LCD_buttons();
  if (Stop_Select_count == 1) {
    lcd.clear();
    for (int i = 0; i < 5; i++)
      a[i] = millis();
    upPrint(0);
    stopPrint(1);
    stopPrint(2);
    stopPrint(3);
    stopPrint(4);
    Serial.print(Stop_Right_count);
    while ( Stop_Select_count == 1) {
       read_LCD_buttons();
        Serial.print(Stop_UpDown_count);
      switch (Stop_UpDown_count) {
        case 0: {
            stopPrint2(0); break;
          }
        case 1: {
            stopPrint2(1); break;
          }
        case 2: {
            stopPrint2(2); break;
          }
        case 3: {
            stopPrint2(3); break;
          }
       /* case 4: {
            stopPrint2(4); break;
          } */
      }
    }
  }
}